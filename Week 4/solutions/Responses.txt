5. We observe that the result of u1's toString() method is similar in format to a Student object's toString() method. This is because the inherited toString method() from the Student class is being invoked on the Undergraduate object. All of the state comes form the parent Student class.

8. We observe that the output is the same as the Student objects. Thus, it did not print all of the Undergraduate objects' states properly. This occurs because the parent's (Student class's) toString() method is still invoked and only Student class specific state is returned (name, ID, fees, graduated).

10. We observe that the output from our Undergraduate objects are different from our student objects. This is because the undergraduate (refined) toString() method is invoked instead of the parent's. Thus, all of the state for the undergraduate objects is printed.

Object
  ^
  |
Student
  ^
  |
Undegraduate

10 b) We observe that the code still runs. This is because the default Object class's toString() method is invoked and it returns that string.

12. Yes the code works. NO code changes were necessary. This is because we still have a no-argument constructor in the Student class. That consructor will be invoked when we say new Student(). We can optionally create new students with the overloaded constructor by passing in a name i.e. new Student("Some name")

13. Nothing really happens. The no-argument constructor will be invoked when we create a new Undegraduate object. 

14. If we comment off the no-argument constructor in the Student class, our code does not compile because of the following:
    a) Calling this(); in the overloaded constructor of the Student class will cause a compilation error.
    b) The construcor in our Undergraduate class must call another constructor from the parent Student class. Failure to do so will result in a compilation error.
    c) Calling Student() in our StudentApp runner class will cause a compilation error.

20. We observed that the fees for several students have changed:
    a) Brian Mills fees changed to 1325 (postgrad)
    b) John Rambo fees changed to 5000 (undergrad)
    c) Ellen Ripley fees changed to 4000 (undergrad)
    NB: Barry Allen's status cannot be changed to Full Time because he is an Undegraduate student. A setStatus() method does not exist on the Undergraduate nor Student class.

21. We observe that nothing happens because the calculateFees() method in the Student class is empty.